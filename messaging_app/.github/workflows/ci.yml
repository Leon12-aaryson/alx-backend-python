name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y default-libmysqlclient-dev build-essential pkg-config

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov flake8 coverage

    - name: Set up Django environment
      run: |
        export DJANGO_SETTINGS_MODULE=messaging_app.settings
        export DATABASE_URL=mysql://test_user:test_password@127.0.0.1:3306/test_db
        export SECRET_KEY=test-secret-key-for-ci
        export DEBUG=True

    - name: Run code quality checks
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Django tests
      env:
        DJANGO_SETTINGS_MODULE: messaging_app.settings
        DATABASE_URL: mysql://test_user:test_password@127.0.0.1:3306/test_db
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: True
      run: |
        python manage.py collectstatic --noinput
        python manage.py test chats --verbosity=2 --parallel

    - name: Generate coverage report
      run: |
        coverage run --source='.' manage.py test chats
        coverage report
        coverage html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: htmlcov/

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          .coverage
          htmlcov/
